/** @jsxImportSource theme-ui */

import Head from "next/head";
import { Fragment, useState, useMemo } from "react";
import Carousel from "../components/Carousel";
import ArticeCarousel from "../components/CarouselBlocks/ArticleCarousel";
import ArticleGrid from "../components/Grids/ArticleGrid";
import ContentGrid from "../components/Grids/ContentGrid";
import SectionHeading from "../components/SectionHeading";
import SectionWrapper from "../components/Wrappers/SectionWrapper";
import { fetchStrapiAPI } from "../lib/strapi";
import { ColorTheme } from "../types/modifier";
import { ImageType } from "../types/article";
import { ContentGrid as ContentGridT, HomeBlocks } from "../types/blocks";
import Quote from "../components/Quote";
import FixtureCard from "../components/Cards/FixtureCard";
import { Fixture as FixtureT } from "../types/sportmonks";
import { isMatchLive } from "../utils/matchcenter";
import { useCurrentFixtures, useHomepage } from "../utils/queries";
import { fixturesRestAPI } from "../utils/util";

type BlockPickerProps = { block: HomeBlocks; index: number };

const BlockPicker = ({ block, index }: BlockPickerProps): JSX.Element => {
  switch (block.type) {
    case "articlecarousel":
      return (
        <ArticeCarousel
          block={block}
          theme={index % 2 === 0 ? ColorTheme.GRAY : ColorTheme.LIGHT}
          styles={{ padding: [1, 2] }}
        />
      );

    case "videocarousel":
      return <h1>VideoCarouselPlaceholder</h1>;
    case "articlegrid":
      return (
        <ArticleGrid
          articleGrid={block}
          theme={index % 2 === 0 ? ColorTheme.GRAY : ColorTheme.LIGHT}
        />
      );
    case "quote":
      return <Quote quote={block.quote} pre={block.pre} post={block.post} />;
    default:
      return <></>;
  }
};

export type HomePageProps = {
  attributes: {
    contentGrid: ContentGridT[];
    pageblocks: HomeBlocks[];
    createdAt: string;
    hero: { id: number; title: string };
    publishedAt: string;
    seo: {
      id: number;
      metaDescription: string;
      metaTitle: string;
      shareImage: { data: ImageType };
    };
    updatedAt: string;
  };
  id: number;
};

const Home = (props: {
  homepage: HomePageProps;
  fixtures: FixtureT[];
  seriesIds: string;
}): JSX.Element => {
  const { seriesIds } = props;
  const [refetchInterval, setRefetchInterval] = useState<number>(0);
  const {
    data: currentFixtures,
    isLoading,
    isError,
    error,
    isFetching,
    status,
  } = useCurrentFixtures(seriesIds, refetchInterval);

  const { data: homepageRes, isLoading: isHomepageLoading } = useHomepage();

  const homepage =
    !isHomepageLoading && homepageRes ? homepageRes.data : props.homepage;

  const fixtures =
    !isLoading && currentFixtures ? currentFixtures.data.data : props.fixtures;

  useMemo(() => {
    const isLive = fixtures.filter((fixture) => isMatchLive(fixture.status));
    isLive.length > 0
      ? setRefetchInterval(20000) // 2 mins polling
      : setRefetchInterval(1000 * 300); // 5 mins polling;
  }, [currentFixtures]);

  return (
    <section>
      <Head>
        <title>Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      {homepage.attributes.contentGrid &&
        homepage.attributes.contentGrid.length > 0 && (
          <ContentGrid blocks={homepage.attributes.contentGrid} />
        )}

      <SectionWrapper>
        <SectionHeading
          title={`Match schedule & results`}
          theme={ColorTheme.LIGHT}
          styles={{ px: [0, 1] }}
          link={{
            href: `/schedule`,
            external: false,
            label: `all schedule`,
          }}
        />
        <Carousel
          swiperId={`fixturecarousel`}
          items={fixtures.map((fixtureItem) => {
            return {
              content: (
                <Fragment key={fixtureItem.id}>
                  <FixtureCard fixture={fixtureItem} />
                </Fragment>
              ),
            };
          })}
        />
      </SectionWrapper>

      {homepage.attributes.pageblocks &&
        homepage.attributes.pageblocks.length > 0 &&
        homepage.attributes.pageblocks.map((block, index) => {
          return (
            <div key={index}>
              <BlockPicker block={block} index={index} />
            </div>
          );
        })}
    </section>
  );
};

export async function getServerSideProps() {
  const [homepage, fixturesDefinedInCMS] = await Promise.all([
    fetchStrapiAPI("/home", {
      populate: "deep, 4",
    }),
    fetchStrapiAPI("/fixtures-list", {
      populate: "deep, 2",
    }),
  ]);

  const seriesIds = fixturesDefinedInCMS.data.attributes.series
    .map((series: any) => series.seriesId)
    .toString();

  const response = await fetch(
    `${fixturesRestAPI}/fixtures/current-fixtures?seriesIds=${seriesIds}`
  );

  const fixtures = await response.json();

  return {
    props: {
      homepage: homepage.data,
      fixtures: fixtures.data,
      seriesIds,
    },
    // revalidate: 60 * 5,
  };
}

export default Home;
